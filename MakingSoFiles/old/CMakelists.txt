cmake_minimum_required(VERSION 3.19)

# set the project name and version
project(mylibrary VERSION 1.0)

# set the C++ standard to use
set(CMAKE_CXX_STANDARD 17)

# set the Android API level and NDK version
set(ANDROID_API_LEVEL 29)

# set the path to the Android NDK
set(ANDROID_NDK_PATH "C:\\Development\\ndk\\25.2.9519653")
# my code
set(OpenCV_DIR "D:\\openCVBuild")
find_package(OpenCV REQUIRED)
include_directories(${OpenCV_INCLUDE_DIRS})
include_directories(${CMAKE_CURRENT_SOURCE_DIR}/include)
set(ROOT_DIR                ${CMAKE_CURRENT_LIST_DIR})
set(SRC_DIR                 ${ROOT_DIR}/src)
set(INC_DIR                 ${ROOT_DIR}/include)
set(LIB_SRC
    ${SRC_DIR}/aruco.cpp
    ${SRC_DIR}/demo.cpp
    ${SRC_DIR}/log.cpp
    # ${SRC_DIR}/UVCExternalCamera.cpp
    # ${SRC_DIR}/UVCImu.cpp
)
 set(LIB_INC
    ${INC_DIR}/aruco.hpp
    ${INC_DIR}/log.hpp
)
# set the path to the Android SDK

set(ANDROID_SDK_PATH)

# set the path to the toolchain file
set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -stdlib=libc++")
set(ANDROID_TOOLCHAIN_FILE "${ANDROID_NDK_PATH}/build/cmake/android.toolchain.cmake")

# set the target architecture
set(ANDROID_ARCH_ABI "arm64-v8a")

# set the path to the source files
# set(SOURCE_FILES src/demo.cpp)
find_package(Iconv REQUIRED)
find_library(cxx-shared-lib c++_shared)

# add the library target
add_library(mylibrary SHARED ${LIB_SRC} ${LIB_INC})

# set the include directories
target_include_directories(mylibrary PRIVATE ${ANDROID_NDK_PATH}/sysroot/usr/include/)

# set the link libraries
target_link_libraries(mylibrary PUBLIC Iconv::Iconv android log ${cxx-shared-lib} ${OpenCV_LIBS})

# set the compiler flags
target_compile_options(mylibrary PRIVATE -Wall -Werror)

# set the output directory
set_target_properties(mylibrary PROPERTIES LIBRARY_OUTPUT_DIRECTORY "${CMAKE_CURRENT_SOURCE_DIR}/src/main/jniLibs/${ANDROID_ARCH_ABI}")
